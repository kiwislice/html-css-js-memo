<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on 學習筆記</title>
    <link>https://kiwislice.github.io/html-css-js-memo/tags/spring/</link>
    <description>Recent content in spring on 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Mon, 10 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kiwislice.github.io/html-css-js-memo/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用javax.validation</title>
      <link>https://kiwislice.github.io/html-css-js-memo/java/spring/javax-validation/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/java/spring/javax-validation/</guid>
      <description>目標：在Spring+JSF專案上使用javax.validation，用標籤即可達到基本檢查
 根據https://beanvalidation.org/2.0/有實作的包似乎只有Hibernate Validator
 public class Sysclitime { /** 診別代碼(PK) */ @Id @NotBlank private String code; /** 語系代碼(PK) */ @Id @NotBlank private String langcode; /** 診別名稱 */ @Size(min=0, max=10) private String name; } 遇到的問題 訊息沒有繁體中文 所有訊息都放在hibernate-validator.jar的org.hibernate.validator中，但就是沒有繁中，因此只好複製修改一份放在src/main/resource內的最外層，也就是跟application.properties放一起，似乎有設定可以指定位置，但沒有特別研究
客製的訊息 預設訊息內容雖然清楚，但對於表單輸入總是需要說明是哪個欄位有怎樣的問題，因此需要在預設訊息前面加上欄位名稱。因此需要自定MessageInterpolator(參考)，但實作起來頗為麻煩，因此改為在驗證完取得Set&amp;lt;ConstraintViolation&amp;lt;Object&amp;gt;&amp;gt;後另外處理
JSF的自動檢查 由於JSF在validation階段就會自動啟用檢查，是滿方便的，但要改成客製的Validator好像有點麻煩，因此可以用&amp;lt;f:validateBean disabled=&amp;quot;true&amp;quot;&amp;gt;把全範圍包起來，就完全關閉JSF自動檢查了
Spring與Hibernate沒有共用Validator 預期進行檢查的時間點是在進資料庫之前，也就是Repository的操作，而此時Hibernate也確實會自動進行檢查。由於需要客製訊息，因此需要替換預設的Validator。Spring可以透過設定Bean來替換，但Spring的Validator跟Hibernate沒有共用*1,*2，所以需要直接替換Hibernate的Validator，考慮所有設定都透過Spring型式，就沒再研究
@Bean public Validator validator(MessageSource messageSource) { LocalValidatorFactoryBean factory = new LocalValidatorFactoryBean(); factory.setValidationMessageSource(messageSource); return factory; } 結論 由於需要訊息前方加上欄位名稱，如果無法在MessageInterpolator達成，就勢必要手動觸發驗證。要在MessageInterpolator達成，就需要替換Hibernate的Validator</description>
    </item>
    
    <item>
      <title>Hibernate時區設定</title>
      <link>https://kiwislice.github.io/html-css-js-memo/java/spring/hibernate-timezone/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/java/spring/hibernate-timezone/</guid>
      <description>需要應付不同時區時，資料庫儲存UTC+0的時間，頁面動態決定要顯示的時區。但從資料庫取出的java.util.Date會自動設定為環境預設時區
方案1 修改JVM預設時區：
java -Duser.timezone=UTC -jar project.jar 或是
@SpringBootApplication public class Application { @PostConstruct void started() { TimeZone.setDefault(TimeZone.getTimeZone(&amp;#34;UTC&amp;#34;)); } public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 方案2 用Hibernate的話可以設定JDBC時區
spring.jpa.properties.hibernate.jdbc.time_zone = UTC 參考資料
https://moelholm.com/2016/11/09/spring-boot-controlling-timezones-with-hibernate/</description>
    </item>
    
    <item>
      <title>自定義Scope</title>
      <link>https://kiwislice.github.io/html-css-js-memo/java/spring/custom-scope/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/java/spring/custom-scope/</guid>
      <description>先準備自定義的Scope物件(此範例為JSF的ViewScope)
import org.springframework.beans.factory.ObjectFactory; import org.springframework.beans.factory.config.Scope; public class ViewScope implements Scope { public static final String SCOPE_NAME = &amp;#34;custom_view&amp;#34;; /** 取得給定名稱物件，不存在則建立 */ @Override public Object get(String name, ObjectFactory&amp;lt;?&amp;gt; objectFactory) { Map&amp;lt;String, Object&amp;gt; viewMap = FacesContext.getCurrentInstance().getViewRoot().getViewMap(); if (viewMap.containsKey(name)) { return viewMap.get(name); } else { Object object = objectFactory.getObject(); viewMap.put(name, object); return object; } } @Override public String getConversationId() { return null; } @Override public void registerDestructionCallback(String name, Runnable callback) { } /** 移除指定物件 */ @Override public Object remove(String name) { return FacesContext.</description>
    </item>
    
  </channel>
</rss>