<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tree on 學習筆記</title>
    <link>https://kiwislice.github.io/html-css-js-memo/tags/tree/</link>
    <description>Recent content in tree on 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Thu, 18 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kiwislice.github.io/html-css-js-memo/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Week 5 編程作業:Kd-Trees</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week5/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week5/</guid>
      <description>編程作業: Kd-Trees 100分關鍵在如果當前最短距離&amp;gt;區域到點最短距離時才找，區域到點的最短距離可先用點到線的距離比過
PointSET.java import java.util.LinkedList; import java.util.List; import java.util.TreeSet; import edu.princeton.cs.algs4.Point2D; import edu.princeton.cs.algs4.RectHV; public class PointSET { private TreeSet&amp;lt;Point2D&amp;gt; set; public PointSET() { this.set = new TreeSet&amp;lt;&amp;gt;(); } public boolean isEmpty() { return this.set.isEmpty(); } public int size() { return this.set.size(); } public void insert(Point2D p) { requireNonNull(p); this.set.add(p); } public boolean contains(Point2D p) { requireNonNull(p); return this.set.contains(p); } public void draw() { for (Point2D p : this.set) p.</description>
    </item>
    
  </channel>
</rss>