<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>學習筆記</title>
    <link>https://kiwislice.github.io/html-css-js-memo/</link>
    <description>Recent content on 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Thu, 18 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kiwislice.github.io/html-css-js-memo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Uinon-Find Algorithm</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/union-find/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/union-find/</guid>
      <description> 用途 判斷2個目標是否在同一組、判斷2個目標是否相連
實現  用1維陣列表示N個目標
 array[n]表示第n個目標的父節點
 每個群組可視為一棵樹，任意2點有相同根節點表示同組
 array[i]==i表示到達根節點
 將2點設為同組只需
  public void unite(int p, int q) { int i = root(p); int j = root(q); id[i] = j; } 瓶頸  樹太深時尋找根節點費時  優化  另外開個陣列紀錄群組大小，合併時將小樹放到大樹下，減少深度 在訪問根的過程中，將所有節點的父節點都順手改為父父節點，減少深度  參考資料  https://www.cs.princeton.edu/~rs/AlgsDS07/01UnionFind.pdf  </description>
    </item>
    
    <item>
      <title>Week 1 編程作業:Percolation</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week1/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week1/</guid>
      <description>編程作業: Percolation 100分關鍵在使用2個WeightedQuickUnionUF，一個繪圖用，一個判斷滲透用
Percolation.java import edu.princeton.cs.algs4.WeightedQuickUnionUF; public class Percolation { private static final int FULL_ROOT = 0; private final int n; private final boolean[] open; private final WeightedQuickUnionUF uf; private final WeightedQuickUnionUF ufForCheckPercolates; private final int END_ROOT; private int openSize; private boolean percolates; public Percolation(int n) { if (n &amp;lt;= 0) throw new java.lang.IllegalArgumentException(); this.n = n; final int size = n * n + 2; this.open = new boolean[size]; this.</description>
    </item>
    
    <item>
      <title>取得Textarea游標位置</title>
      <link>https://kiwislice.github.io/html-css-js-memo/html-css-js/get-cursor-position-textarea/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/html-css-js/get-cursor-position-textarea/</guid>
      <description> 透過JS可取得textarea的selectionStart和selectionEnd屬性
function(textareaId) { var ta = document.getElementById(textareaClientId); return ta.selectionStart; }  參考  https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Property/selectionStart  </description>
    </item>
    
    <item>
      <title>登記Windows服務</title>
      <link>https://kiwislice.github.io/html-css-js-memo/tools/register-windows-service/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/tools/register-windows-service/</guid>
      <description>使用工具 winsw
流程  到winsw/releases下載適用的版本(由環境的.NET版本決定) 從winsw/examples下載xml設定檔 準備好服務啟動時要執行的目標(EX:.JAR檔) 將1., 2., 3.放在同資料夾並給相同檔名  開啟命令提示字元(看狀況可用系統管理員身分執行)，進入該資料夾，執行xxx.exe install即可(xxx自行替換成該exe檔名)  DEBUG 如果啟動過程出錯，可至事件檢視器查看</description>
    </item>
    
    <item>
      <title>文字截斷</title>
      <link>https://kiwislice.github.io/html-css-js-memo/html-css-js/text-truncate/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/html-css-js/text-truncate/</guid>
      <description> 單行： .text-truncate { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }  https://codepen.io/PJCHENder/pen/QOgVLR  多行：  https://css-tricks.com/line-clampin/ https://codepen.io/nxworld/pen/wxZPwL  </description>
    </item>
    
    <item>
      <title>Week 2 編程作業:Deques and Randomized Queues</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week2/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week2/</guid>
      <description>編程作業: Deques and Randomized Queues Deque使用節點，RandomizedQueue使用陣列，100分沒有太困難
Deque.java import java.util.Iterator; public class Deque&amp;lt;Item&amp;gt; implements Iterable&amp;lt;Item&amp;gt; { private final Node head; private final Node tail; private int size; public Deque() { this.head = new Node(); this.tail = new Node(); this.head.next = this.tail; this.tail.pre = this.head; } public boolean isEmpty() { return this.size == 0; } public int size() { return this.size; } public void addFirst(Item item) { checkNullItem(item); Node newNode = new Node(item); insertAfter(this.</description>
    </item>
    
    <item>
      <title>Week 3 編程作業:Collinear Points</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week3/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week3/</guid>
      <description>編程作業: Collinear Points 100分關鍵是FastCollinearPoints在判斷線段重複時不使用Set或Sort，而是只有當前點是當前線段的左下端點時才加入
Point.java /****************************************************************************** * Compilation: javac Point.java * Execution: java Point * Dependencies: none * * An immutable data type for points in the plane. * For use on Coursera, Algorithms Part I programming assignment. * ******************************************************************************/ import java.util.Comparator; import edu.princeton.cs.algs4.StdDraw; public class Point implements Comparable&amp;lt;Point&amp;gt; { private final int x; // x-coordinate of this point 	private final int y; // y-coordinate of this point  /** * Initializes a new point.</description>
    </item>
    
    <item>
      <title>Week 4 編程作業:8 Puzzle</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week4/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week4/</guid>
      <description>編程作業: 8 Puzzle 只有99分
Board.java import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Board { private final short[] blocks; private final int n; private int i0; private int hamming; private int manhattan; private long hash; public Board(int[][] blocks) { this(blocks.length, copy(blocks)); } private Board(int n, short[] blocks) { this.blocks = Arrays.copyOf(blocks, blocks.length); this.n = n; this.hash = 0; for (int i = 0; i &amp;lt; blocks.length; i++) { if (this.</description>
    </item>
    
    <item>
      <title>Week 5 編程作業:Kd-Trees</title>
      <link>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week5/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/algorithm/coursera/algorithms-part-i/algorithms-part1-week5/</guid>
      <description>編程作業: Kd-Trees 100分關鍵在如果當前最短距離&amp;gt;區域到點最短距離時才找，區域到點的最短距離可先用點到線的距離比過
PointSET.java import java.util.LinkedList; import java.util.List; import java.util.TreeSet; import edu.princeton.cs.algs4.Point2D; import edu.princeton.cs.algs4.RectHV; public class PointSET { private TreeSet&amp;lt;Point2D&amp;gt; set; public PointSET() { this.set = new TreeSet&amp;lt;&amp;gt;(); } public boolean isEmpty() { return this.set.isEmpty(); } public int size() { return this.set.size(); } public void insert(Point2D p) { requireNonNull(p); this.set.add(p); } public boolean contains(Point2D p) { requireNonNull(p); return this.set.contains(p); } public void draw() { for (Point2D p : this.set) p.</description>
    </item>
    
    <item>
      <title>自定義Scope</title>
      <link>https://kiwislice.github.io/html-css-js-memo/java/spring/custom-scope/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/java/spring/custom-scope/</guid>
      <description>先準備自定義的Scope物件(此範例為JSF的ViewScope)
import org.springframework.beans.factory.ObjectFactory; import org.springframework.beans.factory.config.Scope; public class ViewScope implements Scope { public static final String SCOPE_NAME = &amp;#34;custom_view&amp;#34;; /** 取得給定名稱物件，不存在則建立 */ @Override public Object get(String name, ObjectFactory&amp;lt;?&amp;gt; objectFactory) { Map&amp;lt;String, Object&amp;gt; viewMap = FacesContext.getCurrentInstance().getViewRoot().getViewMap(); if (viewMap.containsKey(name)) { return viewMap.get(name); } else { Object object = objectFactory.getObject(); viewMap.put(name, object); return object; } } @Override public String getConversationId() { return null; } @Override public void registerDestructionCallback(String name, Runnable callback) { } /** 移除指定物件 */ @Override public Object remove(String name) { return FacesContext.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>https://kiwislice.github.io/html-css-js-memo/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/credits/</guid>
      <description>github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }
.ghContributors &amp;gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors &amp;gt; div label{ padding-left: 4px ; } .ghContributors &amp;gt; div span{ font-size: x-small; padding-left: 4px ; }
  @vjeantet 247 commits 
 @matcornic 49 commits 
 @W-Floyd 24 commits 
 @Pilskalns 24 commits 
 @gwleclerc 21 commits 
 @lierdakil 16 commits</description>
    </item>
    
    <item>
      <title>Docdock-built Sites</title>
      <link>https://kiwislice.github.io/html-css-js-memo/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/showcase/</guid>
      <description> https://invincible.site/ by @shazic https://bitfan.io/ by @vjeantet </description>
    </item>
    
    <item>
      <title>Html-Css-Js學習筆記</title>
      <link>https://kiwislice.github.io/html-css-js-memo/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kiwislice.github.io/html-css-js-memo/_footer/</guid>
      <description>By kiwislice.</description>
    </item>
    
  </channel>
</rss>